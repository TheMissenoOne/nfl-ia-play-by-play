"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _loglevel = _interopRequireDefault(require("loglevel"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var RulesClient =
/*#__PURE__*/
function () {
  function RulesClient(apiClient) {
    _classCallCheck(this, RulesClient);

    this.log = _loglevel["default"];
    this.apiClient = apiClient; // Create an alias to the apiClient's callApi

    this.callApi = this.apiClient.callApi.bind(this.apiClient);
  }

  _createClass(RulesClient, [{
    key: "getRulesForLogicalInterface",
    value: function getRulesForLogicalInterface(logicalInterfaceId) {
      if (this.draftMode) {
        return this.getRulesForLogicalInterface(logicalInterfaceId);
      } else {
        return this.getActiveRulesForLogicalInterface(logicalInterfaceId);
      }
    }
  }, {
    key: "getDraftRulesForLogicalInterface",
    value: function getDraftRulesForLogicalInterface(logicalInterfaceId) {
      return this.callApi('GET', 200, true, ['draft', 'logicalinterfaces', logicalInterfaceId, 'rules']);
    }
  }, {
    key: "getActiveRulesForLogicalInterface",
    value: function getActiveRulesForLogicalInterface(logicalInterfaceId) {
      return this.callApi('GET', 200, true, ['logicalinterfaces', logicalInterfaceId, 'rules']);
    }
  }, {
    key: "createRule",
    value: function createRule(logicalInterfaceId, name, condition) {
      var description = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
      var notificationStrategy = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : RulesClient.RuleNotificationStrategy.EVERY_TIME();
      var body = {
        name: name,
        condition: condition,
        notificationStrategy: notificationStrategy
      };
      if (description) body['description'] = description;
      var base = this.draftMode ? ['draft', 'logicalinterfaces', logicalInterfaceId, 'rules'] : ['logicalinterfaces', logicalInterfaceId, 'rules'];
      return this.callApi('POST', 201, true, base, JSON.stringify(body));
    }
  }, {
    key: "updateRule",
    value: function updateRule(rule) {
      var base = this.draftMode ? ['draft', 'logicalinterfaces', rule.logicalInterfaceId, 'rules', rule.id] : ['logicalinterfaces', rule.logicalInterfaceId, 'rules', rule.id];
      return this.callApi('PUT', 200, true, base, JSON.stringify(rule));
    }
  }, {
    key: "deleteRule",
    value: function deleteRule(logicalInterfaceId, ruleId) {
      var base = this.draftMode ? ['draft', 'logicalinterfaces', logicalInterfaceId, 'rules', ruleId] : ['logicalinterfaces', logicalInterfaceId, 'rules', ruleId];
      return this.callApi('DELETE', 204, false, base);
    }
  }]);

  return RulesClient;
}();

exports["default"] = RulesClient;
RulesClient.RuleNotificationStrategy = {
  EVERY_TIME: function EVERY_TIME() {
    return {
      when: 'every-time'
    };
  },
  BECOMES_TRUE: function BECOMES_TRUE() {
    return {
      when: 'becomes-true'
    };
  },
  X_IN_Y: function X_IN_Y(count) {
    return {
      when: 'x-in-y',
      count: count
    };
  },
  PERSISTS: function PERSISTS(count, timePeriod) {
    return {
      when: 'persists',
      count: count,
      timePeriod: timePeriod
    };
  }
};