"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _loglevel = _interopRequireDefault(require("loglevel"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var MgmtClient =
/*#__PURE__*/
function () {
  function MgmtClient(apiClient) {
    _classCallCheck(this, MgmtClient);

    this.log = _loglevel["default"];
    this.apiClient = apiClient; // Create an alias to the apiClient's callApi

    this.callApi = this.apiClient.callApi.bind(this.apiClient);
  }

  _createClass(MgmtClient, [{
    key: "getAllDeviceManagementRequests",
    value: function getAllDeviceManagementRequests() {
      this.log.debug("[ApiClient] getAllDeviceManagementRequests()");
      return this.callApi('GET', 200, true, ['mgmt', 'requests'], null);
    }
  }, {
    key: "initiateDeviceManagementRequest",
    value: function initiateDeviceManagementRequest(action, parameters, devices) {
      this.log.debug("[ApiClient] initiateDeviceManagementRequest(" + action + ", " + parameters + ", " + devices + ")");
      var body = {
        action: action,
        parameters: parameters,
        devices: devices
      };
      return this.callApi('POST', 202, true, ['mgmt', 'requests'], JSON.stringify(body));
    }
  }, {
    key: "getDeviceManagementRequest",
    value: function getDeviceManagementRequest(requestId) {
      this.log.debug("[ApiClient] getDeviceManagementRequest(" + requestId + ")");
      return this.callApi('GET', 200, true, ['mgmt', 'requests', requestId], null);
    }
  }, {
    key: "deleteDeviceManagementRequest",
    value: function deleteDeviceManagementRequest(requestId) {
      this.log.debug("[ApiClient] deleteDeviceManagementRequest(" + requestId + ")");
      return this.callApi('DELETE', 204, false, ['mgmt', 'requests', requestId], null);
    }
  }, {
    key: "getDeviceManagementRequestStatus",
    value: function getDeviceManagementRequestStatus(requestId) {
      this.log.debug("[ApiClient] getDeviceManagementRequestStatus(" + requestId + ")");
      return this.callApi('GET', 200, true, ['mgmt', 'requests', requestId, 'deviceStatus'], null);
    }
  }, {
    key: "getDeviceManagementRequestStatusByDevice",
    value: function getDeviceManagementRequestStatusByDevice(requestId, typeId, deviceId) {
      this.log.debug("[ApiClient] getDeviceManagementRequestStatusByDevice(" + requestId + ", " + typeId + ", " + deviceId + ")");
      return this.callApi('GET', 200, true, ['mgmt', 'requests', requestId, 'deviceStatus', typeId, deviceId], null);
    }
  }]);

  return MgmtClient;
}();

exports["default"] = MgmtClient;
;