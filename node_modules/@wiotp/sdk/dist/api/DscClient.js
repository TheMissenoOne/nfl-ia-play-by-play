"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _loglevel = _interopRequireDefault(require("loglevel"));

var errors = _interopRequireWildcard(require("./ApiErrors"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var DscClient =
/*#__PURE__*/
function () {
  function DscClient(apiClient) {
    _classCallCheck(this, DscClient);

    this.log = _loglevel["default"]; // callApi(method, expectedHttpCode, expectJsonContent, paths, body, params) {

    this.apiClient = apiClient;
  }
  /**************************************
   ** Services
   **************************************/
  // {name, description, type, credentials}


  _createClass(DscClient, [{
    key: "createService",
    value: function createService(service) {
      return this.apiClient.callApi('POST', 201, true, ['s2s', 'services'], service)["catch"](function (err) {
        return errors.handleError(err, {
          CUDSS0026E: errors.InvalidServiceCredentials
        });
      });
    }
  }, {
    key: "createCloudantService",
    value: function createCloudantService(_ref) {
      var name = _ref.name,
          description = _ref.description,
          username = _ref.username,
          password = _ref.password,
          _ref$host = _ref.host,
          host = _ref$host === void 0 ? "".concat(username, ".cloudant.com") : _ref$host,
          _ref$port = _ref.port,
          port = _ref$port === void 0 ? 443 : _ref$port,
          _ref$url = _ref.url,
          url = _ref$url === void 0 ? "https://".concat(username, ":").concat(password, "@").concat(host) : _ref$url,
          apikey = _ref.apikey,
          iam_apikey_name = _ref.iam_apikey_name,
          iam_apikey_description = _ref.iam_apikey_description,
          iam_role_crn = _ref.iam_role_crn,
          iam_serviceid_crn = _ref.iam_serviceid_crn;
      return this.createService({
        name: name,
        description: description,
        type: 'cloudant',
        credentials: {
          username: username,
          password: password,
          host: host,
          port: port,
          url: url,
          apikey: apikey,
          iam_apikey_name: iam_apikey_name,
          iam_apikey_description: iam_apikey_description,
          iam_role_crn: iam_role_crn,
          iam_serviceid_crn: iam_serviceid_crn
        }
      });
    }
  }, {
    key: "createEventstreamsService",
    value: function createEventstreamsService(_ref2) {
      var name = _ref2.name,
          description = _ref2.description,
          api_key = _ref2.api_key,
          kafka_admin_url = _ref2.kafka_admin_url,
          kafka_brokers_sasl = _ref2.kafka_brokers_sasl,
          user = _ref2.user,
          password = _ref2.password,
          apikey = _ref2.apikey,
          iam_apikey_name = _ref2.iam_apikey_name,
          iam_apikey_description = _ref2.iam_apikey_description,
          iam_role_crn = _ref2.iam_role_crn,
          iam_serviceid_crn = _ref2.iam_serviceid_crn;
      return this.createService({
        name: name,
        description: description,
        type: 'eventstreams',
        credentials: {
          api_key: api_key,
          kafka_admin_url: kafka_admin_url,
          kafka_brokers_sasl: kafka_brokers_sasl,
          user: user,
          password: password,
          apikey: apikey,
          iam_apikey_name: iam_apikey_name,
          iam_apikey_description: iam_apikey_description,
          iam_role_crn: iam_role_crn,
          iam_serviceid_crn: iam_serviceid_crn
        }
      });
    }
  }, {
    key: "getService",
    value: function getService(serviceId) {
      return this.apiClient.callApi('GET', 200, true, ['s2s', 'services', serviceId])["catch"](function (err) {
        return errors.handleError(err, {
          CUDSS0019E: errors.ServiceNotFound
        });
      });
    }
  }, {
    key: "getServices",
    value: function getServices(serviceType) {
      return this.apiClient.callApi('GET', 200, true, ['s2s', 'services'], null, {
        bindingMode: 'manual',
        serviceType: serviceType
      })["catch"](function (err) {
        return errors.handleError(err, {});
      });
    }
  }, {
    key: "deleteService",
    value: function deleteService(serviceId) {
      return this.apiClient.callApi('DELETE', 204, false, ['s2s', 'services', serviceId])["catch"](function (err) {
        return errors.handleError(err, {});
      });
    }
    /**************************************
     ** Historian Connectors
     **************************************/
    // {name, description, serviceId, timezone, enabled}

  }, {
    key: "createConnector",
    value: function createConnector(_ref3) {
      var name = _ref3.name,
          type = _ref3.type,
          _ref3$description = _ref3.description,
          description = _ref3$description === void 0 ? undefined : _ref3$description,
          serviceId = _ref3.serviceId,
          _ref3$timezone = _ref3.timezone,
          timezone = _ref3$timezone === void 0 ? 'UTC' : _ref3$timezone,
          _ref3$enabled = _ref3.enabled,
          enabled = _ref3$enabled === void 0 ? true : _ref3$enabled;
      return this.apiClient.callApi('POST', 201, true, ['historianconnectors'], {
        name: name,
        description: description,
        type: type,
        serviceId: serviceId,
        timezone: timezone,
        enabled: enabled
      })["catch"](function (err) {
        return errors.handleError(err, {});
      });
    }
  }, {
    key: "updateConnector",
    value: function updateConnector(_ref4) {
      var id = _ref4.id,
          name = _ref4.name,
          description = _ref4.description,
          serviceId = _ref4.serviceId,
          type = _ref4.type,
          enabled = _ref4.enabled,
          timezone = _ref4.timezone;
      return this.apiClient.callApi('PUT', 200, true, ['historianconnectors', id], {
        id: id,
        name: name,
        description: description,
        serviceId: serviceId,
        type: type,
        enabled: enabled,
        timezone: timezone
      })["catch"](function (err) {
        return errors.handleError(err, {});
      });
    }
  }, {
    key: "getConnectors",
    value: function getConnectors(_ref5) {
      var name = _ref5.name,
          serviceType = _ref5.serviceType,
          enabled = _ref5.enabled,
          serviceId = _ref5.serviceId;
      return this.apiClient.callApi('GET', 200, true, ['historianconnectors'], null, {
        name: name ? name : undefined,
        type: serviceType ? serviceType : undefined,
        enabled: enabled === undefined ? undefined : enabled,
        serviceId: serviceId ? serviceId : undefined
      })["catch"](function (err) {
        return errors.handleError(err, {});
      });
    }
  }, {
    key: "deleteConnector",
    value: function deleteConnector(connectorId) {
      return this.apiClient.callApi('DELETE', 204, false, ['historianconnectors', connectorId])["catch"](function (err) {
        return errors.handleError(err, {});
      });
    }
    /**************************************
     ** Destinations
     **************************************/
    // {name, type, configuration}

  }, {
    key: "createDestination",
    value: function createDestination(connectorId, destination) {
      return this.apiClient.callApi('POST', 201, true, ['historianconnectors', connectorId, 'destinations'], destination)["catch"](function (err) {
        return errors.handleError(err, {
          CUDDSC0103E: errors.DestinationAlreadyExists
        });
      });
    }
  }, {
    key: "createCloudantDestination",
    value: function createCloudantDestination(connectorId, _ref6) {
      var name = _ref6.name,
          bucketInterval = _ref6.bucketInterval;
      return this.createDestination(connectorId, {
        name: name,
        type: 'cloudant',
        configuration: {
          bucketInterval: bucketInterval
        }
      });
    }
  }, {
    key: "createEventstreamsDestination",
    value: function createEventstreamsDestination(connectorId, _ref7) {
      var name = _ref7.name,
          _ref7$partitions = _ref7.partitions,
          partitions = _ref7$partitions === void 0 ? 1 : _ref7$partitions;
      return this.createDestination(connectorId, {
        name: name,
        type: 'eventstreams',
        configuration: {
          partitions: partitions
        }
      });
    }
  }, {
    key: "getDestinations",
    value: function getDestinations(connectorId) {
      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
        name: undefined
      };
      var name = params.name;
      return this.apiClient.callApi('GET', 200, true, ['historianconnectors', connectorId, 'destinations'], null, {
        name: name ? name : undefined
      })["catch"](function (err) {
        return errors.handleError(err, {});
      });
    }
  }, {
    key: "deleteDestination",
    value: function deleteDestination(connectorId, destinationName) {
      return this.apiClient.callApi('DELETE', [200, 204], false, ['historianconnectors', connectorId, 'destinations', destinationName])["catch"](function (err) {
        return errors.handleError(err, {});
      });
    }
    /**************************************
     ** Forwarding Rules
     **************************************/
    // {name, destinationName, type:event, selector: {deviceType, eventId}}
    // {name, destinationName, type:state, selector: {logicalInterfaceId}}

  }, {
    key: "createForwardingRule",
    value: function createForwardingRule(connectorId, forwardingrule) {
      return this.apiClient.callApi('POST', 201, true, ['historianconnectors', connectorId, 'forwardingrules'], forwardingrule)["catch"](function (err) {
        return errors.handleError(err, {});
      });
    }
  }, {
    key: "createEventForwardingRule",
    value: function createEventForwardingRule(connectorId, _ref8) {
      var name = _ref8.name,
          destinationName = _ref8.destinationName,
          _ref8$deviceType = _ref8.deviceType,
          deviceType = _ref8$deviceType === void 0 ? '*' : _ref8$deviceType,
          _ref8$eventId = _ref8.eventId,
          eventId = _ref8$eventId === void 0 ? '*' : _ref8$eventId;
      return this.createForwardingRule(connectorId, {
        name: name,
        destinationName: destinationName,
        type: 'event',
        selector: {
          deviceType: deviceType,
          eventId: eventId
        }
      });
    }
  }, {
    key: "getForwardingRules",
    value: function getForwardingRules(connectorId) {
      // TODO: QS params
      return this.apiClient.callApi('GET', 200, true, ['historianconnectors', connectorId, 'forwardingrules'])["catch"](function (err) {
        return errors.handleError(err, {});
      });
    }
  }, {
    key: "deleteForwardingRule",
    value: function deleteForwardingRule(connectorId, forwardingRuleId) {
      return this.apiClient.callApi('DELETE', 204, false, ['historianconnectors', connectorId, 'forwardingrules', forwardingRuleId])["catch"](function (err) {
        return errors.handleError(err, {});
      });
    }
  }]);

  return DscClient;
}();

exports["default"] = DscClient;