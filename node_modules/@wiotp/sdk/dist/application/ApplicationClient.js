"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _util = require("../util");

var _BaseClient2 = _interopRequireDefault(require("../BaseClient"));

var _ApiClient = _interopRequireDefault(require("../api/ApiClient"));

var _RegistryClient = _interopRequireDefault(require("../api/RegistryClient"));

var _MgmtClient = _interopRequireDefault(require("../api/MgmtClient"));

var _LecClient = _interopRequireDefault(require("../api/LecClient"));

var _DscClient = _interopRequireDefault(require("../api/DscClient"));

var _RulesClient = _interopRequireDefault(require("../api/RulesClient"));

var _StateClient = _interopRequireDefault(require("../api/StateClient"));

var _ApplicationConfig = _interopRequireDefault(require("./ApplicationConfig"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var DEVICE_EVT_RE = /^iot-2\/type\/(.+)\/id\/(.+)\/evt\/(.+)\/fmt\/(.+)$/;
var DEVICE_CMD_RE = /^iot-2\/type\/(.+)\/id\/(.+)\/cmd\/(.+)\/fmt\/(.+)$/;
var DEVICE_STATE_RE = /^iot-2\/type\/(.+)\/id\/(.+)\/intf\/(.+)\/evt\/state$/;
var DEVICE_STATE_ERROR_RE = /^iot-2\/type\/(.+)\/id\/(.+)\/err\/data$/;
var RULE_TRIGGER_RE = /^iot-2\/intf\/(.+)\/rule\/(.+)\/evt\/trigger$/;
var RULE_ERROR_RE = /^iot-2\/intf\/(.+)\/rule\/(.+)\/err\/data$/;
var DEVICE_MON_RE = /^iot-2\/type\/(.+)\/id\/(.+)\/mon$/;
var APP_MON_RE = /^iot-2\/app\/(.+)\/mon$/;

var ApplicationClient =
/*#__PURE__*/
function (_BaseClient) {
  _inherits(ApplicationClient, _BaseClient);

  function ApplicationClient(config) {
    var _this;

    _classCallCheck(this, ApplicationClient);

    if (!config instanceof _ApplicationConfig["default"]) {
      throw new Error("Config must be an instance of ApplicationConfig");
    }

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ApplicationClient).call(this, config));
    _this.useLtpa = config.auth && config.auth.useLtpa;

    if (config.auth && config.auth.useLtpa || config.getOrgId() != "quickstart") {
      _this._apiClient = new _ApiClient["default"](_this.config);
      _this.dsc = new _DscClient["default"](_this._apiClient);
      _this.lec = new _LecClient["default"](_this._apiClient);
      _this.mgmt = new _MgmtClient["default"](_this._apiClient);
      _this.registry = new _RegistryClient["default"](_this._apiClient);
      _this.rules = new _RulesClient["default"](_this._apiClient);
      _this.state = new _StateClient["default"](_this._apiClient);
    }

    _this.log.debug("[ApplicationClient:constructor] ApplicationClient initialized for organization : " + config.getOrgId());

    return _this;
  }

  _createClass(ApplicationClient, [{
    key: "connect",
    value: function connect() {
      var _this2 = this;

      _get(_getPrototypeOf(ApplicationClient.prototype), "connect", this).call(this);

      this.mqtt.on('message', function (topic, payload) {
        _this2.log.trace("[ApplicationClient:onMessage] mqtt: ", topic, payload.toString()); // For each type of registered callback, check the incoming topic against a Regexp.
        // If matches, forward the payload and various fields from the topic (extracted using groups in the regexp)


        var match = DEVICE_EVT_RE.exec(topic);

        if (match) {
          _this2.emit('deviceEvent', match[1], match[2], match[3], match[4], payload, topic);

          return;
        }

        var match = DEVICE_CMD_RE.exec(topic);

        if (match) {
          _this2.emit('deviceCommand', match[1], match[2], match[3], match[4], payload, topic);

          return;
        }

        var match = DEVICE_STATE_RE.exec(topic);

        if (match) {
          _this2.emit('deviceState', match[1], match[2], match[3], payload, topic);

          return;
        }

        var match = DEVICE_STATE_ERROR_RE.exec(topic);

        if (match) {
          _this2.emit('deviceStateError', match[1], match[2], payload, topic);

          return;
        }

        var match = RULE_TRIGGER_RE.exec(topic);

        if (match) {
          _this2.emit('ruleTrigger', match[1], match[2], payload, topic);

          return;
        }

        var match = RULE_ERROR_RE.exec(topic);

        if (match) {
          _this2.emit('ruleError', match[1], match[2], payload, topic);

          return;
        }

        var match = DEVICE_MON_RE.exec(topic);

        if (match) {
          _this2.emit('deviceStatus', match[1], match[2], payload, topic);

          return;
        }

        var match = APP_MON_RE.exec(topic);

        if (match) {
          _this2.emit('appStatus', match[1], payload, topic);

          return;
        } // catch all which logs the receipt of an unexpected message


        _this2.log.warn("[ApplicationClient:onMessage] Message received on unexpected topic" + ", " + topic + ", " + payload);
      });
    } // ==========================================================================
    // Device Events
    // ==========================================================================

  }, {
    key: "publishEvent",
    value: function publishEvent(typeId, deviceId, eventId, format, data, qos, callback) {
      qos = qos || 0;

      if (!(0, _util.isDefined)(typeId) || !(0, _util.isDefined)(deviceId) || !(0, _util.isDefined)(eventId) || !(0, _util.isDefined)(format)) {
        this.log.error("[ApplicationClient:publishDeviceEvent] Required params for publishDeviceEvent not present");
        this.emit('error', "[ApplicationClient:publishDeviceEvent] Required params for publishDeviceEvent not present");
        return;
      }

      var topic = "iot-2/type/" + typeId + "/id/" + deviceId + "/evt/" + eventId + "/fmt/" + format;

      this._publish(topic, data, qos, callback);

      return this;
    }
  }, {
    key: "subscribeToEvents",
    value: function subscribeToEvents(typeId, deviceId, eventId, format, qos, callback) {
      typeId = typeId || '+';
      deviceId = deviceId || '+';
      eventId = eventId || '+';
      format = format || '+';
      qos = qos || 0;
      var topic = "iot-2/type/" + typeId + "/id/" + deviceId + "/evt/" + eventId + "/fmt/" + format;

      this._subscribe(topic, qos, callback);

      return this;
    }
  }, {
    key: "unsubscribeFromEvents",
    value: function unsubscribeFromEvents(typeId, deviceId, eventId, format) {
      typeId = typeId || '+';
      deviceId = deviceId || '+';
      eventId = eventId || '+';
      format = format || '+';
      var topic = "iot-2/type/" + typeId + "/id/" + deviceId + "/evt/" + eventId + "/fmt/" + format;

      this._unsubscribe(topic, callback);

      return this;
    } // ==========================================================================
    // Device Commands
    // ==========================================================================

  }, {
    key: "publishCommand",
    value: function publishCommand(typeId, deviceId, commandId, format, data, qos, callback) {
      qos = qos || 0;

      if (!(0, _util.isDefined)(typeId) || !(0, _util.isDefined)(deviceId) || !(0, _util.isDefined)(commandId) || !(0, _util.isDefined)(format)) {
        this.log.error("[ApplicationClient:publishDeviceCommand] Required params for publishDeviceCommand not present");
        this.emit('error', "[ApplicationClient:publishDeviceCommand] Required params for publishDeviceCommand not present");
        return;
      }

      var topic = "iot-2/type/" + typeId + "/id/" + deviceId + "/cmd/" + commandId + "/fmt/" + format;

      this._publish(topic, data, qos, callback);

      return this;
    }
  }, {
    key: "subscribeToCommands",
    value: function subscribeToCommands(typeId, deviceId, commandId, format, qos, callback) {
      typeId = typeId || '+';
      deviceId = deviceId || '+';
      commandId = commandId || '+';
      format = format || '+';
      qos = qos || 0;
      var topic = "iot-2/type/" + typeId + "/id/" + deviceId + "/cmd/" + commandId + "/fmt/" + format;
      this.log.debug("[ApplicationClient:subscribeToDeviceCommands] Calling subscribe with QoS " + qos);

      this._subscribe(topic, qos, callback);

      return this;
    }
  }, {
    key: "unsubscribeFromCommands",
    value: function unsubscribeFromCommands(typeId, deviceId, commandId, format, callback) {
      typeId = typeId || '+';
      deviceId = deviceId || '+';
      commandId = commandId || '+';
      format = format || '+';
      var topic = "iot-2/type/" + typeId + "/id/" + deviceId + "/cmd/" + commandId + "/fmt/" + format;

      this._unsubscribe(topic, callback);

      return this;
    } // ==========================================================================
    // Device State Events
    // ==========================================================================

  }, {
    key: "subscribeToDeviceState",
    value: function subscribeToDeviceState(type, id, interfaceId, qos) {
      type = type || '+';
      id = id || '+';
      interfaceId = interfaceId || '+';
      qos = qos || 0;
      var topic = "iot-2/type/" + type + "/id/" + id + "/intf/" + interfaceId + "/evt/state";
      this.log.debug("[ApplicationClient:subscribeToDeviceState] Calling subscribe with QoS " + qos);

      this._subscribe(topic, qos);

      return this;
    }
  }, {
    key: "unsubscribeToDeviceState",
    value: function unsubscribeToDeviceState(type, id, interfaceId) {
      type = type || '+';
      id = id || '+';
      interfaceId = interfaceId || '+';
      var topic = "iot-2/type/" + type + "/id/" + id + "/intf/" + interfaceId + "/evt/state";

      this._unsubscribe(topic);

      return this;
    } // ==========================================================================
    // Device State Errors
    // ==========================================================================

  }, {
    key: "subscribeToDeviceErrors",
    value: function subscribeToDeviceErrors(type, id, qos) {
      type = type || '+';
      id = id || '+';
      qos = qos || 0;
      var topic = "iot-2/type/" + type + "/id/" + id + "/err/data";
      this.log.debug("[ApplicationClient:subscribeToDeviceErrors] Calling subscribe with QoS " + qos);

      this._subscribe(topic, qos);

      return this;
    }
  }, {
    key: "unsubscribeToDeviceErrors",
    value: function unsubscribeToDeviceErrors(type, id) {
      type = type || '+';
      id = id || '+';
      var topic = "iot-2/type/" + type + "/id/" + id + "/err/data";

      this._unsubscribe(topic);

      return this;
    } // ==========================================================================
    // Rule Triggers
    // ==========================================================================

  }, {
    key: "subscribeToRuleTriggers",
    value: function subscribeToRuleTriggers(interfaceId, ruleId, qos) {
      interfaceId = interfaceId || '+';
      ruleId = ruleId || '+';
      qos = qos || 0;
      var topic = "iot-2/intf/" + interfaceId + "/rule/" + ruleId + "/evt/trigger";
      this.log.debug("[ApplicationClient:subscribeToRuleTriggers] Calling subscribe with QoS " + qos);

      this._subscribe(topic, qos);

      return this;
    }
  }, {
    key: "unsubscribeToRuleTriggers",
    value: function unsubscribeToRuleTriggers(interfaceId, ruleId) {
      interfaceId = interfaceId || '+';
      ruleId = ruleId || '+';
      var topic = "iot-2/intf/" + interfaceId + "/rule/" + ruleId + "/evt/trigger";

      this._unsubscribe(topic);

      return this;
    } // ==========================================================================
    // Rule Trigger Errors
    // ==========================================================================

  }, {
    key: "subscribeToRuleErrors",
    value: function subscribeToRuleErrors(interfaceId, ruleId, qos) {
      interfaceId = interfaceId || '+';
      ruleId = ruleId || '+';
      qos = qos || 0;
      var topic = "iot-2/intf/" + interfaceId + "/rule/" + ruleId + "/err/data";
      this.log.debug("[ApplicationClient:subscribeToRuleErrors] Calling subscribe with QoS " + qos);

      this._subscribe(topic, qos);

      return this;
    }
  }, {
    key: "unsubscribeToRuleErrors",
    value: function unsubscribeToRuleErrors(interfaceId, ruleId) {
      interfaceId = interfaceId || '+';
      ruleId = ruleId || '+';
      var topic = "iot-2/intf/" + interfaceId + "/rule/" + ruleId + "/err/data";

      this._unsubscribe(topic);

      return this;
    } // ==========================================================================
    // Device Status
    // ==========================================================================

  }, {
    key: "subscribeToDeviceStatus",
    value: function subscribeToDeviceStatus(type, id, qos) {
      type = type || '+';
      id = id || '+';
      qos = qos || 0;
      var topic = "iot-2/type/" + type + "/id/" + id + "/mon";
      this.log.debug("[ApplicationClient:subscribeToDeviceStatus] Calling subscribe with QoS " + qos);

      this._subscribe(topic, qos);

      return this;
    }
  }, {
    key: "unsubscribeToDeviceStatus",
    value: function unsubscribeToDeviceStatus(type, id) {
      type = type || '+';
      id = id || '+';
      var topic = "iot-2/type/" + type + "/id/" + id + "/mon";

      this._unsubscribe(topic);

      return this;
    } // ==========================================================================
    // Application Status
    // ==========================================================================

  }, {
    key: "subscribeToAppStatus",
    value: function subscribeToAppStatus(id, qos) {
      id = id || '+';
      qos = qos || 0;
      var topic = "iot-2/app/" + id + "/mon";
      this.log.debug("[ApplicationClient:subscribeToAppStatus] Calling subscribe with QoS " + qos);

      this._subscribe(topic, qos);

      return this;
    }
  }, {
    key: "unsubscribeToAppStatus",
    value: function unsubscribeToAppStatus(id) {
      id = id || '+';
      var topic = "iot-2/app/" + id + "/mon";

      this._unsubscribe(topic);

      return this;
    }
  }]);

  return ApplicationClient;
}(_BaseClient2["default"]);

exports["default"] = ApplicationClient;
;