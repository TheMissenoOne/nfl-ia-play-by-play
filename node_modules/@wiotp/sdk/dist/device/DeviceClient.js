"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _util = require("../util");

var _BaseClient2 = _interopRequireDefault(require("../BaseClient"));

var _DeviceConfig = _interopRequireDefault(require("./DeviceConfig"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var WILDCARD_TOPIC = 'iot-2/cmd/+/fmt/+';
var CMD_RE = /^iot-2\/cmd\/(.+)\/fmt\/(.+)$/;

var util = require('util');

var DeviceClient =
/*#__PURE__*/
function (_BaseClient) {
  _inherits(DeviceClient, _BaseClient);

  function DeviceClient(config) {
    var _this;

    _classCallCheck(this, DeviceClient);

    if (!config instanceof _DeviceConfig["default"]) {
      throw new Error("Config must be an instance of DeviceConfig");
    }

    _this = _possibleConstructorReturn(this, _getPrototypeOf(DeviceClient).call(this, config));

    _this.log.debug("[DeviceClient:constructor] DeviceClient initialized for " + config.getClientId());

    return _this;
  }

  _createClass(DeviceClient, [{
    key: "_commandSubscriptionCallback",
    value: function _commandSubscriptionCallback(err, granted) {
      if (err == null) {
        for (var index in granted) {
          var grant = granted[index];
          this.log.debug("[DeviceClient:connect] Subscribed to device commands on " + grant.topic + " at QoS " + grant.qos);
        }
      } else {
        this.log.error("[DeviceClient:connect] Unable to establish subscription for device commands: " + err);
        this.emit("error", new Error("Unable to establish subscription for device commands: " + err));
      }
    }
  }, {
    key: "connect",
    value: function connect() {
      var _this2 = this;

      _get(_getPrototypeOf(DeviceClient.prototype), "connect", this).call(this);

      this.mqtt.on('connect', function () {
        // On connect establish a subscription for commands sent to this device (but not if connecting to quickstart)
        if (!_this2.config.isQuickstart()) {
          // You need to bind a particular this context to the method before you can use it as a callback
          _this2.mqtt.subscribe(WILDCARD_TOPIC, {
            qos: 1
          }, _this2._commandSubscriptionCallback.bind(_this2));
        }
      });
      this.mqtt.on('message', function (topic, payload) {
        _this2.log.debug("[DeviceClient:onMessage] Message received on topic : " + topic + " with payload : " + payload);

        var match = CMD_RE.exec(topic);

        if (match) {
          _this2.emit('command', match[1], match[2], payload, topic);
        }
      });
    }
  }, {
    key: "publishEvent",
    value: function publishEvent(eventId, format, data, qos, callback) {
      qos = qos || 0;

      if (!(0, _util.isDefined)(eventId) || !(0, _util.isDefined)(format)) {
        this.log.error("[DeviceClient:publishEvent] Required params for publishEvent not present");
        this.emit('error', "[DeviceClient:publishEvent] Required params for publishEvent not present");
        return;
      }

      var topic = util.format("iot-2/evt/%s/fmt/%s", eventId, format);

      this._publish(topic, data, qos, callback);

      return this;
    }
  }]);

  return DeviceClient;
}(_BaseClient2["default"]);

exports["default"] = DeviceClient;