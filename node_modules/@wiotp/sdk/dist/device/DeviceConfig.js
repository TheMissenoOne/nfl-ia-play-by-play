"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _BaseConfig2 = _interopRequireDefault(require("../BaseConfig"));

var _loglevel = _interopRequireDefault(require("loglevel"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var YAML = require('yaml');

var fs = require('fs');

var DeviceConfig =
/*#__PURE__*/
function (_BaseConfig) {
  _inherits(DeviceConfig, _BaseConfig);

  function DeviceConfig(identity, auth, options) {
    var _this;

    _classCallCheck(this, DeviceConfig);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(DeviceConfig).call(this, identity, auth, options)); //Validate the arguments

    if (_this.identity == null) {
      throw new Error("Missing identity from configuration");
    }

    if (!("orgId" in _this.identity) || _this.identity.orgId == null) {
      throw new Error("Missing identity.orgId from configuration");
    }

    if (!("typeId" in _this.identity) || _this.identity.typeId == null) {
      throw new Error("Missing identity.typeId from configuration");
    }

    if (!("deviceId" in _this.identity) || _this.identity.deviceId == null) {
      throw new Error("Missing identity.deviceId from configuration");
    } // Authentication is not supported for quickstart


    if (_this.identity.orgId == "quickstart") {
      if (_this.auth != null) {
        throw new Error("Quickstart service does not support device authentication");
      }
    } else {
      if (_this.auth == null) {
        throw new Error("Missing auth from configuration");
      }

      if (!("token" in _this.auth) || _this.auth.token == null) {
        throw new Error("Missing auth.token from configuration");
      }
    }

    return _this;
  }

  _createClass(DeviceConfig, [{
    key: "getOrgId",
    value: function getOrgId() {
      return this.identity.orgId;
    }
  }, {
    key: "getClientId",
    value: function getClientId() {
      return "d:" + this.identity.orgId + ":" + this.identity.typeId + ":" + this.identity.deviceId;
    }
  }, {
    key: "getMqttUsername",
    value: function getMqttUsername() {
      return "use-token-auth";
    }
  }, {
    key: "getMqttPassword",
    value: function getMqttPassword() {
      return this.auth.token;
    }
  }], [{
    key: "parseEnvVars",
    value: function parseEnvVars() {
      //Identity
      var orgId = process.env.WIOTP_IDENTITY_ORGID || null;
      var typeId = process.env.WIOTP_IDENTITY_TYPEID || null;
      var deviceId = process.env.WIOTP_IDENTITY_DEVICEID || null; // Auth

      var authToken = process.env.WIOTP_AUTH_TOKEN || null; // Also support WIOTP_API_TOKEN usage

      if (authToken == null) {
        authToken = process.env.WIOTP_API_TOKEN || null;
      } // Options


      var domain = process.env.WIOTP_OPTIONS_DOMAIN || null;
      var logLevel = process.env.WIOTP_OPTIONS_LOGLEVEL || "info";
      var port = process.env.WIOTP_OPTIONS_MQTT_PORT || null;
      var transport = process.env.WIOTP_OPTIONS_MQTT_TRANSPORT || null;
      var caFile = process.env.WIOTP_OPTIONS_MQTT_CAFILE || null;
      var cleanStart = process.env.WIOTP_OPTIONS_MQTT_CLEANSTART || "true";
      var sessionExpiry = process.env.WIOTP_OPTIONS_MQTT_SESSIONEXPIRY || 3600;
      var keepAlive = process.env.WIOTP_OPTIONS_MQTT_KEEPALIVE || 60;
      var sharedSubs = process.env.WIOTP_OPTIONS_MQTT_SHAREDSUBSCRIPTION || "false"; // String to int conversions

      if (port != null) {
        port = parseInt(port);
      }

      sessionExpiry = parseInt(sessionExpiry);
      keepAlive = parseInt(keepAlive);
      var identity = {
        orgId: orgId,
        typeId: typeId,
        deviceId: deviceId
      };
      var options = {
        domain: domain,
        logLevel: logLevel,
        mqtt: {
          port: port,
          transport: transport,
          cleanStart: ["True", "true", "1"].includes(cleanStart),
          sessionExpiry: sessionExpiry,
          keepAlive: keepAlive,
          sharedSubscription: ["True", "true", "1"].includes(sharedSubs),
          caFile: caFile
        }
      };
      var auth = null; // Quickstart doesn't support auth, so ensure we only add this if it's defined

      if (authToken != null) {
        auth = {
          token: authToken
        };
      }

      return new DeviceConfig(identity, auth, options);
    }
  }, {
    key: "parseConfigFile",
    value: function parseConfigFile(configFilePath) {
      //Example Device Configuration File:

      /*
      identity:
          orgId: org1id
          typeId: raspberry-pi-3
          deviceId: 00ef08ac05
      auth:
           token: Ab$76s)asj8_s5
      options:
          domain: internetofthings.ibmcloud.com
          logLevel: error|warning|info|debug
          mqtt:
              port: 8883
              transport: tcp
              cleanStart: true
              sessionExpiry: 3600
              keepAlive: 60
              caFile: /path/to/certificateAuthorityFile.pem
      */
      var configFile = fs.readFileSync(configFilePath, 'utf8');
      var data = YAML.parse(configFile);

      if (!fs.existsSync(configFilePath)) {
        throw new Error("File not found");
      } else {
        try {
          var _configFile = fs.readFileSync(configFilePath, 'utf8');

          var data = YAML.parse(_configFile);
        } catch (err) {
          throw new Error("Error reading device configuration file: " + err.code);
        }
      }

      if ("options" in data & "logLevel" in data["options"]) {
        var validLevels = ["error", "warning", "info", "debug"];

        if (!validLevels.includes(data["options"]["logLevel"])) {
          throw new Error("Optional setting options.logLevel (Currently: " + data["options"]["logLevel"] + ") must be one of error, warning, info, debug");
        }
      } else {
        data["options"]["logLevel"] = _loglevel["default"].GetLogger(data["options"]["logLevel"].toUpperCase());
      }

      return new DeviceConfig(data['identity'], data['auth'], data['options']);
    }
  }]);

  return DeviceConfig;
}(_BaseConfig2["default"]);

exports["default"] = DeviceConfig;